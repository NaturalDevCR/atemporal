{"version":3,"sources":["../../src/plugins/relativeTime.ts"],"sourcesContent":["import { TemporalWrapper } from '../TemporalWrapper';\nimport type { Plugin, TimeUnit } from '../types';\n\ndeclare module '../TemporalWrapper' {\n    interface TemporalWrapper {\n        fromNow(withoutSuffix?: boolean): string;\n        toNow(withoutSuffix?: boolean): string;\n    }\n}\n\nconst relativeTimePlugin: Plugin = (Atemporal, atemporal) => {\n    const UNITS: TimeUnit[] = ['year', 'month', 'day', 'hour', 'minute', 'second'];\n\n    Atemporal.prototype.fromNow = function (this: TemporalWrapper, withoutSuffix = false) {\n        const dateToCompare = this;\n        const now = atemporal();\n\n        let bestUnit: TimeUnit = 'second';\n        let bestDiff = 0;\n\n        for (const unit of UNITS) {\n            const diff = now.diff(dateToCompare.raw, unit);\n            if (Math.abs(diff) >= 1) {\n                bestUnit = unit;\n                bestDiff = Math.round(diff);\n                break;\n            }\n        }\n\n        const locale = atemporal.getDefaultLocale();\n        const rtf = new Intl.RelativeTimeFormat(locale, { numeric: 'auto' });\n\n        if (withoutSuffix) {\n            // Usamos formatToParts para descomponer el string\n            const parts = rtf.formatToParts(bestDiff, bestUnit as Intl.RelativeTimeFormatUnit);\n            // Nos quedamos solo con las partes que son el nÃºmero y la unidad, y las unimos.\n            return parts\n                .filter(part => part.type === 'integer' || part.type === 'unit')\n                .map(part => part.value)\n                .join(' ');\n        }\n\n        // Si no se pide 'withoutSuffix', usamos el formato normal.\n        return rtf.format(bestDiff, bestUnit as Intl.RelativeTimeFormatUnit);\n    };\n\n    Atemporal.prototype.toNow = function (this: TemporalWrapper, withoutSuffix = false) {\n        return this.fromNow(withoutSuffix);\n    };\n};\n\nexport default relativeTimePlugin;"],"mappings":";AAUA,IAAM,qBAA6B,CAAC,WAAW,cAAc;AACzD,QAAM,QAAoB,CAAC,QAAQ,SAAS,OAAO,QAAQ,UAAU,QAAQ;AAE7E,YAAU,UAAU,UAAU,SAAiC,gBAAgB,OAAO;AAClF,UAAM,gBAAgB;AACtB,UAAM,MAAM,UAAU;AAEtB,QAAI,WAAqB;AACzB,QAAI,WAAW;AAEf,eAAW,QAAQ,OAAO;AACtB,YAAM,OAAO,IAAI,KAAK,cAAc,KAAK,IAAI;AAC7C,UAAI,KAAK,IAAI,IAAI,KAAK,GAAG;AACrB,mBAAW;AACX,mBAAW,KAAK,MAAM,IAAI;AAC1B;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,SAAS,UAAU,iBAAiB;AAC1C,UAAM,MAAM,IAAI,KAAK,mBAAmB,QAAQ,EAAE,SAAS,OAAO,CAAC;AAEnE,QAAI,eAAe;AAEf,YAAM,QAAQ,IAAI,cAAc,UAAU,QAAuC;AAEjF,aAAO,MACF,OAAO,UAAQ,KAAK,SAAS,aAAa,KAAK,SAAS,MAAM,EAC9D,IAAI,UAAQ,KAAK,KAAK,EACtB,KAAK,GAAG;AAAA,IACjB;AAGA,WAAO,IAAI,OAAO,UAAU,QAAuC;AAAA,EACvE;AAEA,YAAU,UAAU,QAAQ,SAAiC,gBAAgB,OAAO;AAChF,WAAO,KAAK,QAAQ,aAAa;AAAA,EACrC;AACJ;AAEA,IAAO,uBAAQ;","names":[]}