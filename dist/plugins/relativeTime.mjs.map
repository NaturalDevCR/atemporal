{"version":3,"sources":["../../src/plugins/relativeTime.ts"],"sourcesContent":["/**\n * @file This plugin extends the TemporalWrapper class with relative time formatting,\n * allowing for human-readable strings like \"5 minutes ago\" or \"in 2 hours\".\n * It leverages the native `Intl` APIs for robust localization.\n */\n\nimport { TemporalWrapper } from '../TemporalWrapper';\nimport type { AtemporalFactory, Plugin, TimeUnit } from '../types';\n\n// Augment the TemporalWrapper interface to include the new methods.\n// This provides full type safety and autocompletion for consumers of the plugin.\ndeclare module '../TemporalWrapper' {\n    interface TemporalWrapper {\n        /**\n         * Calculates the relative time from the instance to now.\n         * @param withoutSuffix - If true, removes the \"ago\" or \"in\" prefix/suffix.\n         * @example\n         * atemporal().subtract(5, 'minutes').fromNow(); // \"5 minutes ago\"\n         * atemporal().add(2, 'hours').fromNow(); // \"in 2 hours\"\n         */\n        fromNow(withoutSuffix?: boolean): string;\n\n        /**\n         * Calculates the relative time from now to the instance.\n         * This is the inverse of `fromNow`.\n         * @param withoutSuffix - If true, removes the \"ago\" or \"in\" prefix/suffix.\n         * @example\n         * atemporal().subtract(5, 'minutes').toNow(); // \"in 5 minutes\"\n         * atemporal().add(2, 'hours').toNow(); // \"2 hours ago\"\n         */\n        toNow(withoutSuffix?: boolean): string;\n    }\n}\n\n/**\n * A robust helper function to calculate relative time.\n * This version uses a threshold-based logic (similar to Day.js/Moment.js) to select\n * the most appropriate human-readable unit.\n *\n * @param instance - The atemporal instance to format.\n * @param comparisonDate - The date to compare against (typically \"now\").\n * @param withoutSuffix - Whether to strip the \"ago\"/\"in\" suffix.\n * @param locale - The locale to use for formatting.\n * @returns The formatted relative time string.\n */\nconst getRelativeTime = (\n    instance: TemporalWrapper,\n    comparisonDate: TemporalWrapper,\n    withoutSuffix: boolean,\n    locale: string\n): string => {\n    if (!instance.isValid() || !comparisonDate.isValid()) {\n        return 'Invalid Date';\n    }\n\n    // Thresholds for unit selection, to provide more natural language.\n    const THRESHOLDS = {\n        s: 45,  // seconds to minute\n        m: 45,  // minutes to hour\n        h: 22,  // hours to day\n        d: 26,  // days to month\n        M: 11,  // months to year\n    };\n\n    const diffSeconds = instance.diff(comparisonDate, 'second');\n    const diffMinutes = instance.diff(comparisonDate, 'minute');\n    const diffHours = instance.diff(comparisonDate, 'hour');\n    const diffDays = instance.diff(comparisonDate, 'day');\n    const diffMonths = instance.diff(comparisonDate, 'month');\n    const diffYears = instance.diff(comparisonDate, 'year');\n\n    let bestUnit: Intl.RelativeTimeFormatUnit;\n    let bestDiff: number;\n\n    // Determine the best unit based on thresholds\n    if (Math.abs(diffSeconds) < THRESHOLDS.s) {\n        bestUnit = 'second';\n        bestDiff = Math.round(diffSeconds);\n    } else if (Math.abs(diffMinutes) < THRESHOLDS.m) {\n        bestUnit = 'minute';\n        bestDiff = Math.round(diffMinutes);\n    } else if (Math.abs(diffHours) < THRESHOLDS.h) {\n        bestUnit = 'hour';\n        bestDiff = Math.round(diffHours);\n    } else if (Math.abs(diffDays) < THRESHOLDS.d) {\n        bestUnit = 'day';\n        bestDiff = Math.round(diffDays);\n    } else if (Math.abs(diffMonths) < THRESHOLDS.M) {\n        bestUnit = 'month';\n        bestDiff = Math.round(diffMonths);\n    } else {\n        bestUnit = 'year';\n        bestDiff = Math.round(diffYears);\n    }\n\n    if (withoutSuffix) {\n        // Use Intl.NumberFormat for a robust way to get the number and the\n        // correctly pluralized, localized unit without any \"ago\" or \"in\" suffix.\n        return new Intl.NumberFormat(locale, {\n            style: 'unit',\n            unit: bestUnit,\n            unitDisplay: 'long',\n        }).format(Math.abs(bestDiff));\n    }\n\n    // For the default case, use Intl.RelativeTimeFormat which adds the suffix.\n    const rtf = new Intl.RelativeTimeFormat(locale, { numeric: 'auto' });\n    return rtf.format(bestDiff, bestUnit);\n};\n\n\nconst relativeTimePlugin: Plugin = (Atemporal, atemporal: AtemporalFactory) => {\n    Atemporal.prototype.fromNow = function (this: TemporalWrapper, withoutSuffix = false) {\n        const now = atemporal();\n        const locale = atemporal.getDefaultLocale();\n        return getRelativeTime(this, now, withoutSuffix, locale);\n    };\n\n    Atemporal.prototype.toNow = function (this: TemporalWrapper, withoutSuffix = false) {\n        const now = atemporal();\n        const locale = atemporal.getDefaultLocale();\n        return getRelativeTime(now, this, withoutSuffix, locale);\n    };\n};\n\nexport default relativeTimePlugin;"],"mappings":";AA6CA,IAAM,kBAAkB,CACpB,UACA,gBACA,eACA,WACS;AACT,MAAI,CAAC,SAAS,QAAQ,KAAK,CAAC,eAAe,QAAQ,GAAG;AAClD,WAAO;AAAA,EACX;AAGA,QAAM,aAAa;AAAA,IACf,GAAG;AAAA;AAAA,IACH,GAAG;AAAA;AAAA,IACH,GAAG;AAAA;AAAA,IACH,GAAG;AAAA;AAAA,IACH,GAAG;AAAA;AAAA,EACP;AAEA,QAAM,cAAc,SAAS,KAAK,gBAAgB,QAAQ;AAC1D,QAAM,cAAc,SAAS,KAAK,gBAAgB,QAAQ;AAC1D,QAAM,YAAY,SAAS,KAAK,gBAAgB,MAAM;AACtD,QAAM,WAAW,SAAS,KAAK,gBAAgB,KAAK;AACpD,QAAM,aAAa,SAAS,KAAK,gBAAgB,OAAO;AACxD,QAAM,YAAY,SAAS,KAAK,gBAAgB,MAAM;AAEtD,MAAI;AACJ,MAAI;AAGJ,MAAI,KAAK,IAAI,WAAW,IAAI,WAAW,GAAG;AACtC,eAAW;AACX,eAAW,KAAK,MAAM,WAAW;AAAA,EACrC,WAAW,KAAK,IAAI,WAAW,IAAI,WAAW,GAAG;AAC7C,eAAW;AACX,eAAW,KAAK,MAAM,WAAW;AAAA,EACrC,WAAW,KAAK,IAAI,SAAS,IAAI,WAAW,GAAG;AAC3C,eAAW;AACX,eAAW,KAAK,MAAM,SAAS;AAAA,EACnC,WAAW,KAAK,IAAI,QAAQ,IAAI,WAAW,GAAG;AAC1C,eAAW;AACX,eAAW,KAAK,MAAM,QAAQ;AAAA,EAClC,WAAW,KAAK,IAAI,UAAU,IAAI,WAAW,GAAG;AAC5C,eAAW;AACX,eAAW,KAAK,MAAM,UAAU;AAAA,EACpC,OAAO;AACH,eAAW;AACX,eAAW,KAAK,MAAM,SAAS;AAAA,EACnC;AAEA,MAAI,eAAe;AAGf,WAAO,IAAI,KAAK,aAAa,QAAQ;AAAA,MACjC,OAAO;AAAA,MACP,MAAM;AAAA,MACN,aAAa;AAAA,IACjB,CAAC,EAAE,OAAO,KAAK,IAAI,QAAQ,CAAC;AAAA,EAChC;AAGA,QAAM,MAAM,IAAI,KAAK,mBAAmB,QAAQ,EAAE,SAAS,OAAO,CAAC;AACnE,SAAO,IAAI,OAAO,UAAU,QAAQ;AACxC;AAGA,IAAM,qBAA6B,CAAC,WAAW,cAAgC;AAC3E,YAAU,UAAU,UAAU,SAAiC,gBAAgB,OAAO;AAClF,UAAM,MAAM,UAAU;AACtB,UAAM,SAAS,UAAU,iBAAiB;AAC1C,WAAO,gBAAgB,MAAM,KAAK,eAAe,MAAM;AAAA,EAC3D;AAEA,YAAU,UAAU,QAAQ,SAAiC,gBAAgB,OAAO;AAChF,UAAM,MAAM,UAAU;AACtB,UAAM,SAAS,UAAU,iBAAiB;AAC1C,WAAO,gBAAgB,KAAK,MAAM,eAAe,MAAM;AAAA,EAC3D;AACJ;AAEA,IAAO,uBAAQ;","names":[]}