import { Temporal } from 'temporal-polyfill';
import { DateInput, TimeUnit } from './TemporalUtils';
type SettableUnit = 'year' | 'month' | 'day' | 'hour' | 'minute' | 'second' | 'millisecond';
export declare class TemporalWrapper {
    private readonly datetime;
    constructor(input: DateInput, timeZone?: string);
    static from(input: DateInput, tz?: string): TemporalWrapper;
    timeZone(tz: string): TemporalWrapper;
    add(value: number, unit: TimeUnit): TemporalWrapper;
    subtract(value: number, unit: TimeUnit): TemporalWrapper;
    set(unit: SettableUnit, value: number): TemporalWrapper;
    startOf(unit: 'year' | 'month' | 'week' | 'day' | 'hour' | 'minute' | 'second'): TemporalWrapper;
    endOf(unit: 'year' | 'month' | 'week' | 'day' | 'hour' | 'minute' | 'second'): TemporalWrapper;
    clone(): TemporalWrapper;
    get(unit: SettableUnit): number;
    get year(): number;
    get month(): number;
    get day(): number;
    get hour(): number;
    get minute(): number;
    get second(): number;
    get millisecond(): number;
    get quarter(): number;
    get weekOfYear(): number;
    format(options?: Intl.DateTimeFormatOptions, localeCode?: string): string;
    diff(other: DateInput, unit?: TimeUnit): number;
    toDate(): Date;
    toString(): string;
    get raw(): Temporal.ZonedDateTime;
    isBefore(other: DateInput): boolean;
    isAfter(other: DateInput): boolean;
    isSameDay(other: DateInput): boolean;
    isLeapYear(): boolean;
}
export {};
